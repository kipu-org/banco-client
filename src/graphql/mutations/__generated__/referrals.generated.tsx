/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type CreateReferralCodeMutationVariables = Types.Exact<{
  input: Types.CreateReferralInput;
}>;

export type CreateReferralCodeMutation = {
  __typename?: 'Mutation';
  referrals: {
    __typename?: 'ReferralMutations';
    create: { __typename?: 'CreateReferralResult'; success: boolean };
  };
};

export const CreateReferralCodeDocument = gql`
  mutation CreateReferralCode($input: CreateReferralInput!) {
    referrals {
      create(input: $input) {
        success
      }
    }
  }
`;
export type CreateReferralCodeMutationFn = Apollo.MutationFunction<
  CreateReferralCodeMutation,
  CreateReferralCodeMutationVariables
>;

/**
 * __useCreateReferralCodeMutation__
 *
 * To run a mutation, you first call `useCreateReferralCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReferralCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReferralCodeMutation, { data, loading, error }] = useCreateReferralCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateReferralCodeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateReferralCodeMutation,
    CreateReferralCodeMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    CreateReferralCodeMutation,
    CreateReferralCodeMutationVariables
  >(CreateReferralCodeDocument, options);
}
export type CreateReferralCodeMutationHookResult = ReturnType<
  typeof useCreateReferralCodeMutation
>;
export type CreateReferralCodeMutationResult =
  Apollo.MutationResult<CreateReferralCodeMutation>;
export type CreateReferralCodeMutationOptions = Apollo.BaseMutationOptions<
  CreateReferralCodeMutation,
  CreateReferralCodeMutationVariables
>;
